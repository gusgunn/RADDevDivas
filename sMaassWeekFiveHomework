public with sharing class WeekFiveHomework {
	
	public static void soqlPractice () {

		//1. Below is a SOQL query that should be returning the top 5 Accounts in our org based on Annual Revenue.  
		//Something's not quite right, can you fix the query?
		// ORIGINAL WAS List < Account > topFiveAccounts = [SELECT ID, Name, AnnualRevenue FROM Account WHERE AnnualRevenue !=0];
		List < Account > topFiveAccounts = [SELECT ID, Name, AnnualRevenue FROM Account WHERE AnnualRevenue != null order by AnnualRevenue DESC LIMIT 5];
        
		system.debug('This should be 5: '+topFiveAccounts.size());
        system.debug('The list: '+topFiveAccounts);
        system.debug('The list 0:'+topFiveAccounts[0]);
        system.debug('The list 1:'+topFiveAccounts[1]);
        system.debug('The list 2:'+topFiveAccounts[2]);
        system.debug('The list 3:'+topFiveAccounts[3]);
        system.debug('The list 4:'+topFiveAccounts[4]);


		//2. Here is a query that is missing something.  It compiles, but if you try and run this method in Anonymous
		//you'll get an error.  Fix it! :)
		
		// ANSWER: The error was to add LastName to this SOQL query
		List < Contact > contacts = [SELECT FirstName, LastName, MailingState FROM Contact LIMIT 10];

		for (Contact c: contacts) {
			String name = c.FirstName + ' ' + c.LastName;
		}
		system.debug('The list of contacts: '+contacts);

		//3.  Can you write a SOQL query from scratch that will return the top 10 Accounts in the org, ordered by annual
		//revenue in decending order?  
		List < Account > topTenAccounts = [SELECT ID, Name, AnnualRevenue FROM Account WHERE AnnualRevenue != null order by AnnualRevenue DESC LIMIT 10];
        
		system.debug('This should be 10: '+topTenAccounts.size());
        system.debug('The Top 10 list: '+topTenAccounts);

		//4.  Can you write a SOQL query that will return all opportunities for all accounts in the topFiveAccounts list that we used
		//in Number 1?  (topFiveAccounts) Hint:  If you're stuck, look back a the code in WeekFiveClassExercises, getOpenOppsForHotAccounts method
 
        // Create the list of topFiveAccounts
        // Next, create an opportunity list that will retrieve data from Opportunities that are related to the "topFiveAccounts" 
        // Next, print all opportunities for all accounts in the topFiveAccounts
        
        List <Account> topFiveAcct = topFiveAccounts;
        System.debug('topFiveAcct: '+topFiveAcct);
       	List <Opportunity> getOppTop5Accounts = [SELECT Id, Name, Amount FROM Opportunity WHERE AccountId = :topFiveAcct];
        
        for (opportunity o:getOppTop5Accounts){
        system.debug('Opportunity name and amount: ' + o.Name + ': ' + o.Amount);
    	}
	}

	public static void forTHeLoveOfForLoops () {

		//1. Take a look at the list and loop below.  It's commented out since it can't run as is. 
		// Can you replace the ?? with the number that makes sense based on the comments?
		// Remove the comments and compile.


		//This loop should run 5 times
		for (Integer i=0; i<5; i++) {
			system.debug('i is now: '+i);
		}


		//2.  Below is a loop that iterates through a list.  Can you change it to use the new For Loop syntax?  It should print out 
		//each account name in the debug log when you're done.
		//Use the list size to tell you how many loops, and indexing to fetch values.  If you need help, check the 
		//loopingThroughLists method in WeekFiveClassExercises for hints

		List < Account > accountList = [SELECT ID, Name FROM Account LIMIT 5];

        //Before
		//for (Account a: accountList) {
		//	system.debug('Account Name: '+a.name);
		//}

        //New way
        for (integer i=0; i<accountList.size(); i++){
            system.debug('Account Name: '+accountList[i].Name);
        }        
        
	}
}
